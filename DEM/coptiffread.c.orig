#include <stdlib.h>
#include "tiffio.h"

main(int argc,char **argv)
{
  FILE *outfp, *floatoutfp, *qfp;
  
  if ( argc <3 ){
    printf("Usage: coptiffread dem.tif dem_i2_file\n");
    exit(0);
  }

  outfp=fopen(argv[2],"w");
  //  floatoutfp=fopen("qfloat","w");
  //  qfp=fopen("qbuffer","w");
  
  TIFF* tif = TIFFOpen(argv[1],"r");
  if (tif) {
    uint32 w, h, i, j, tw, th;
    float* buffer;
    uint32 line, linebytes, samp, tileindex, outindex, bytes;
    int16* data;
    float* floatdata;
    
    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &w);  // get file size info
    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &h);
    TIFFGetField(tif, TIFFTAG_TILEWIDTH, &tw);  // get tile size info
    TIFFGetField(tif, TIFFTAG_TILELENGTH, &th);
    //    printf("Sizes w h tw th %d %d %d %d\n",w,h,tw,th);
    //    printf("Tile size %d Est. bytes %d\n",TIFFTileSize(tif),tw*th*4);

    buffer=_TIFFmalloc(TIFFTileSize(tif));  // allocate tiff and slc buffers
    data=malloc(w*h*sizeof(int16)); 
    floatdata=malloc(w*h*sizeof(float)); 
    
    for (line=0;line<h;line += th)
      for (samp=0;samp<w;samp+=tw)
	//line=1024; samp=2048;
      {
	//	printf("reading tile line samp %d %d\n",line,samp);
        bytes=TIFFReadTile(tif, buffer, samp, line,(uint32) 0,(tsample_t) 0); // read tiff line
	//printf("bytes %d, a few samples %f %f %f %f\n",bytes,buffer[100],buffer[101],buffer[1000],buffer[1001]);
	//fwrite(buffer,sizeof(float),tw*th,qfp);
	// convert tile to int16
	for (j=0;j<th;j++) //  loop over lines in tile
	  for (i=0;i<tw;i++)  //  loop over samples in tile
	  {
	    //	    printf("tilesamp tileline datasamp dataline %d %d %d %d\n",i,j,samp+i,line+j);
	    tileindex=i+j*tw;
	    if(i+samp<w && j+line < h){
	    outindex=i+samp+(j+line)*w;
	    //printf("i j samp line tileindex outindex  %d %d %d %d %d %d\n",i,j,samp,line,tileindex,outindex);
	    data[outindex]=buffer[tileindex];  
	    //  floatdata[outindex]=buffer[tileindex];  
	    //printf("buffer data floatdata %f %d %f\n",buffer[tileindex],data[outindex],floatdata[outindex]);
	    }
	  }
      }
    fwrite(data,sizeof(int16),w*h,outfp); 
    //    fwrite(floatdata,sizeof(float),w*h,floatoutfp); 

    //    _TIFFfree(buffer);
    
    printf("write lines, pixels: %d %d\n",w,h);
    
    TIFFClose(tif);
    fclose(outfp);
    
  }
}


