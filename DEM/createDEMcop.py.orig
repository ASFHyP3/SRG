#!/usr/bin/env python3
#
#  from latlon.srtm30.py -- create a DEM of the full sentinel frame using NASADEM
#
#  Default is 30 m postings
#

#  FUNCTION

import sys
import os
import math
import string

if len(sys.argv)< 8:
    print ('Usage: createDEMcop.py demfile demrscfile toplat botlat leftlon rightlon upsamplex upsampley')
    sys.exit(1)

demfile=sys.argv[1]
demrscfile=sys.argv[2]
upsamplex='1'
upsamplexy='1'
if len(sys.argv)>6:
    upsamplex=sys.argv[7]
if len(sys.argv)>7:
    upsampley=sys.argv[8]

coords=[]
coords.append(float(sys.argv[4]))
coords.append(float(sys.argv[6]))
coords.append(float(sys.argv[3]))
coords.append(float(sys.argv[5]))
#print ('input  coords ',coords)
finalcoords=coords.copy()
coords[0]=int(math.ceil(float(coords[0])))
coords[1]=int(math.floor(float(coords[1])))
coords[2]=int(math.ceil(float(coords[2])))
coords[3]=int(math.floor(float(coords[3])))

latlon_file=open('latloncoords', 'w')
#lat-up long-right
for line in range(4):
    latlon_file.write(str(coords[line])+'\n')

latlon_file.close()
latlon_file=open('latloncoords', 'r')
latlon=latlon_file.readlines()
latlon_file.close()

#print (coords)

## taking both ascending, descending orbits into consideration
lat = max(coords[2],coords[0])
long = min (coords[1],coords[3])

x = abs(coords[3]-coords[1])+1
y = abs(coords[2]-coords[0])+1

#print 'lat long x y ',lat,long,x,y

#Find and download .dem files
filelist=[]
fdem=open('demfiles.txt','w')
fdem.close()

for i in range(lat-y,lat):
    for j in range(long,long+x):
        print ('tile: ',i,j)
        command = '$H/DEM/cop_dem.py '+str(i)+' '+str(j)
        print (command)
        ret=os.system(command)

fdem=open('demfiles.txt','r')
dem=fdem.readline().rstrip()
rscfile=dem.replace('.dem','.dem.rsc').rstrip()
while (not os.path.exists(dem)) or (os.path.getsize(dem) == 0):
    dem=fdem.readline().rstrip()
    rscfile=dem.replace('.dem','.dem.rsc').rstrip()
fdem.close()

file=open(rscfile)
strings=file.readlines()
width=strings[0].split()
step=strings[4].split()
command=os.environ['PROC_HOME']+'/DEM/makeDEMcop '+str(lat)+' '+str(long)+' '+str(x)+' '+str(y)+' '+width[1]+' '+step[1]+' '+'demfiles.txt n'
print (command)
ret=os.system(command)
    
rsc=open('elevation.dem.rsc','r')
lines=rsc.readlines()
st=[]
num=[]
for line in lines:
    words=line.split()
    st.append(words[0])
    num.append(words[1])
#print (st)
#print (num)
rsc.close()

newrsc=open('elevation.dem.rsc','w')
for i in range(len(st)):
    newrsc.write(st[i]+((15-len(st[i]))*' '))
    newrsc.write(num[i]+'\n')
newrsc.close()

# trim dem to closer to scene size
latmax = max(finalcoords[0],finalcoords[2])
latmin = min(finalcoords[0],finalcoords[2])
lonmax = max(finalcoords[1],finalcoords[3])
lonmin = min(finalcoords[1],finalcoords[3])
#print ('latmax latmin lonmax lonmin ',latmax,latmin,lonmax,lonmin)

command = 'mv elevation.dem q.dem; mv elevation.dem.rsc q.dem.rsc'
print (command)
ret = os.system(command)

# trim the dem
top=str(latmax)
bot=str(latmin)
left=str(lonmin)
right=str(lonmax)
command = os.environ['PROC_HOME']+'/util/createspecialdem q.dem q.dem.rsc '+demfile+' '+demrscfile+' '+top+' '+bot+' '+left+' '+right+' '+upsamplex+' '+upsampley

print (command)
ret = os.system(command)

#  clean up
command='rm q.dem q.dem.rsc'
ret=os.system(command)
