//!!!!!!!!!!!!!!
//!
//!
//!  azimuth compression subroutine for use in Sentinel back projection processor
//!    called from a fortran main program
//!
//!
//!!!!!!!!!!!!!!

#include <stdlib.h>
#include <stdio.h>
#include <complex.h>
#include <math.h>
#include <unistd.h>
#include <cuComplex.h>
#include <cuda.h>
#include <cmath>
#include <omp.h>
#include <fcntl.h>
#include <time.h>
#include <sys/time.h>

struct ellipsoid{
  double a;
  double e2;
};

extern "C" void latlon_ ( ellipsoid *elp, double *xyz, double *llh,int *i_type );
extern "C" void orbitrangetime_(double *xyz,double *timeorbit,double *xx, double *vv,int *numstatevec,double *tmid,double *satx, double *satv,double *tline,double *rngpix);

// pixelint - the routine to compute complex sum in gpu

__global__ void pixelint(cuFloatComplex *burstdata_d, double *satloc_d, double *xyz_d, double *azoff_d, int demwidth_d, int aperture_d, int iaperture_d, int rawdatalines_d, int samplesPerBurst_d, double rngstart_d, double rngend_d,  double dmrg_d, double wvl_d, cuFloatComplex *outdata_d, int nlines_d){

// set up gpu grid parameters
int index = blockIdx.x * blockDim.x + threadIdx.x;
int stride = blockDim.x * gridDim.x;
//printf("index stride %d %d\n",index,stride);

// internal variables for integration
cuDoubleComplex cacc, cphase;
cuFloatComplex cval;
int intr;
double range, fracr,phase,r,vectx,vecty,vectz,pi;
int azline;
int azstart, azend;

pi=4.*atan2(1.,1.);

// loop over 1D version of 2D arrays
for (long loop = index; loop < nlines_d * demwidth_d; loop +=stride){

    cacc = make_cuDoubleComplex(0.,0.);
    if (azoff_d[loop] > 0.){
        azstart=round(azoff_d[loop] - aperture_d / 2);
    	azend=round(azoff_d[loop] + aperture_d / 2);
	azstart=max(azstart,0);
	azend=min(azend,rawdatalines_d-1);
	for (azline=azstart; azline<azend; azline++){
	  vectx=xyz_d[loop * 3 + 0]-satloc_d[3*azline];
	  vecty=xyz_d[loop * 3 + 1]-satloc_d[3*azline+1];
	  vectz=xyz_d[loop * 3 + 2]-satloc_d[3*azline+2];
	  range=sqrt(vectx*vectx+vecty*vecty+vectz*vectz);
	  if (range>=rngstart_d && range <= rngend_d - dmrg_d){
	    r=(range - rngstart_d) / dmrg_d ;
	    intr=floor(r);
	    fracr=r-intr;

	    cval=cuCaddf( cuCmulf(burstdata_d[azline * samplesPerBurst_d + intr], make_cuComplex(1-fracr,0.)), cuCmulf( burstdata_d[azline * samplesPerBurst_d + (intr+1)], make_cuFloatComplex(fracr,0.)));

	    phase = 4. * pi / wvl_d * range;
	    cphase = make_cuDoubleComplex(cos(phase),sin(phase));
	    cacc = cuCadd(cacc, cuCmul(cuComplexFloatToDouble(cval), cphase));
	  }  // end range test
	}  // end azline loop
    } // end pixel test

    outdata_d[loop]=cuComplexDoubleToFloat(cacc);

} // end loop loop

}

extern "C" void azimuth_compress_(
        float complex *burstdata,
        double *satloc,
        int *rawdatalines,
        int *samplesPerBurst,
        int *demwidth,
        int *demlength,
        int *fdout,
        int *fddem,
        double *deltalat,
        double *deltalon,
        double *firstlat,
        double *firstlon,
        double *latlons,
        double *timeorbit,
        double *xx,
        double *vv,
        int *numstatevec,
        double *rngstart,
        double *rngend,
        double *tstart,
        double *tend,
        double *tmid,
        double *xyz_mid,
        double *vel_mid,
        double *t,
        double *dtaz,
        double *dmrg,
        double *wvl,
        int *aperture,
        int *iaperture,
        double *angc0,
        double *angc1,
        double *prf)
{

// internal variables
  double lat;
  double *lon;
  short *demin;
  double *azoff;
//  double *pixeltime;
  double tline;
  double rngpix;
  double *xyz;
  double umag, fd, veff, td, udotv;
  int firstline, lastline;  // limits on line loop
  int firstpix, lastpix;  // limits on pixel loop
  long long xyzoffset, arraysize;

  int naperture; // naperture is integration midpoint in pixels
  int y1,y2,y3;
  int pixel,line,i;
  int nbytes;
  int nlines;
  off_t iaddr_off_t;
  size_t iaddr_size_t;
  float complex *outdata, *indata;
  float a,b,c,arg,fit;

// variables for openmp pragma argument passing
  int ompdemwidth=*demwidth;
  double omptmid=*tmid;
  double ompangc0=*angc0, ompangc1=*angc1;
  double ompprf=*prf;
  int omprawdatalines=*rawdatalines;
  int ompaperture=*aperture;
  double ompwvl=*wvl;

  struct timeval t0;
  double time0,time1;

  gettimeofday(&t0, NULL);
  time0=t0.tv_sec+t0.tv_usec/1.e6;

// set a gpudevice
  cudaSetDevice(0);

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" grab a gpu time %9.3f\n",time1-time0);

  gettimeofday(&t0, NULL);
  time0=t0.tv_sec+t0.tv_usec/1.e6;

// how much memory will we need to allocate?
   printf("latlons %f %f %f %f\n",latlons[0],latlons[1],latlons[2],latlons[3]);
    lastline=int((latlons[0] - *firstlat) / *deltalat );
    firstline=int((latlons[1] - *firstlat) / *deltalat );
    if (firstline < 0) firstline=0;
    if (lastline > *demlength-1) lastline= *demlength -1;
    nlines=lastline-firstline+1;
    printf("Burst line limits, size (first,last,nlines) %d %d %d\n",firstline,lastline,nlines);

// malloc cpu arrays
  arraysize = (long long int) nlines * (long long int) *demwidth;
  lon = (double *) malloc(*demwidth * sizeof(double));
  demin = (short *) malloc(arraysize * sizeof(short));
  azoff = (double *) malloc(arraysize * sizeof(double));
//  pixeltime = (double *) malloc(*demwidth * sizeof(double));
  xyz = (double *) malloc(arraysize * sizeof(double) * 3);
  outdata = (float complex *)malloc(arraysize * sizeof(float complex));
  indata = (float complex *)malloc(arraysize * sizeof(float complex));

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" cpu malloc time %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

// gpu array definitions
   cuFloatComplex *burstdata_d;
   double *satloc_d;
   double *azoff_d, *xyz_d;
   cuFloatComplex *outdata_d;

   cudaMalloc( (void **)&burstdata_d, sizeof(float complex) * *rawdatalines * *samplesPerBurst);
   cudaMalloc( (void **)&satloc_d, sizeof(double) * 3 * *rawdatalines);
   cudaMalloc( (void **)&azoff_d, sizeof(double) * arraysize);
   cudaMalloc( (void **)&xyz_d, sizeof(double) * 3 * arraysize);
   cudaMalloc( (void **)&outdata_d, sizeof(float complex) * arraysize);

// other variables we'll need in the gpu
//   int    *aperture_d, *iaperture_d, *rawdatalines_d, *samplesPerBurst_d;
//   int    *demwidth_d;
//   double *rngend_d, *dmrg_d, *wvl_d;
//      double *tstart_d, *tend_d, *tline_d;

//   cudaMalloc( (void **)&pixeltime_d, sizeof(double) * *demwidth);
//   cudaMalloc( (void **)&aperture_d, sizeof(int));
//   cudaMalloc( (void **)&iaperture_d, sizeof(int));
//   cudaMalloc( (void **)&rawdatalines_d, sizeof(int));
//   cudaMalloc( (void **)&samplesPerBurst_d, sizeof(int));
//   cudaMalloc( (void **)&demwidth_d, sizeof(int));
//   cudaMalloc( (void **)&rngstart_d, sizeof(double));
//   cudaMalloc( (void **)&rngend_d, sizeof(double));
//   cudaMalloc( (void **)&dmrg_d, sizeof(double));
//   cudaMalloc( (void **)&tstart_d, sizeof(double));
//   cudaMalloc( (void **)&tend_d, sizeof(double));
//   cudaMalloc( (void **)&tline_d, sizeof(double));
//   cudaMalloc( (void **)&wvl_d, sizeof(double));

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" gpu malloc time %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

// constants and such
  int LLH_2_XYZ=1;
  double pi,deg2rad;
  struct ellipsoid elp = { 6378137.0, 0.0066943799901499996};
  pi = 4. * atan2(1.0,1.0);
  deg2rad = pi/180.0;

//  get some basic gpu architecture info
    int blockSize = 256;
    int numBlocks = (*demwidth+blockSize-1)/blockSize;
    printf("GPU blocksize, numblocks: %d %d\n",blockSize,numBlocks);

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" set constants time %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

//  start setting up shared data arrays in gpu
  cudaMemcpy( burstdata_d, burstdata, sizeof(float complex) * *rawdatalines * *samplesPerBurst, cudaMemcpyHostToDevice );
  cudaMemcpy( satloc_d, satloc, sizeof(double) * *rawdatalines * 3, cudaMemcpyHostToDevice );

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" transfer burst and satloc to gpu time %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

// set up longitude loop
   firstpix=(latlons[2]-*firstlon)/ *deltalon; if (firstpix < 0)firstpix=0;
   lastpix=(latlons[3]-*firstlon)/ *deltalon; if (lastpix > *demwidth)lastpix= *demwidth;

//  define longitude array
  for (i=0;i<*demwidth;i++){
    lon[i]=*firstlon + (i-1)* *deltalon;
  }

// zero out data array before integration
   for (int j=0; j<nlines; j++){
      for (i=0;i<*demwidth;i++){
        outdata[i+j * *demwidth]=0.+0.*I;
        }}

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" initialize lon and outdata array time %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

//  process full burst, begin by grabbing proper section of DEM
        iaddr_off_t=(long long int) firstline * (long long int) *demwidth * (long long int) 2;
        nbytes=lseek(*fddem, iaddr_off_t, SEEK_SET);
        iaddr_size_t= (long long int) nlines * (long long int) *demwidth * (long long int) 2;
        nbytes=read(*fddem,demin,iaddr_size_t);
        if (nbytes < 0) {
           printf("dem read error %d\n",nbytes);
           printf("iaddr_off_t %d, iaddr_size_t %d\n",iaddr_off_t, iaddr_size_t);
           printf("nlines %d, demwidth %d\n",nlines,*demwidth);
     }
         
    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" DEM section read in time %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

//  loop over lines in DEM for burst
  for (line=firstline; line<lastline;line++){
    lat=*firstlat + line * *deltalat;

    // parallelize the pixel loop
    #pragma omp parallel for private(pixel,tline,rngpix,umag,udotv,fd,veff,td,naperture,xyzoffset) shared(lat,deg2rad,demin,elp,LLH_2_XYZ,xyz,omptmid,xyz_mid,vel_mid,timeorbit,xx,vv,numstatevec,ompwvl,pi,ompangc0,ompangc1,ompprf,omprawdatalines,azoff,ompaperture,firstpix,lastpix,y1,y2,y3,ompdemwidth,firstline,nlines,line,lon)
	for (pixel=firstpix; pixel< lastpix; pixel++){

	  xyzoffset = ((long long int) (line-firstline) * (long long int) ompdemwidth + (long long int) pixel ) * (long long int) 3;
	// local array definitions for omp loop
	  double *llh = (double *) malloc(sizeof(double)*3);
	  double *xyztemp = (double *) malloc(sizeof(double)*3);
	  double *satx = (double *) malloc(sizeof(double)*3);
	  double *satv = (double *) malloc(sizeof(double)*3);
	  double *unitlookvector = (double *) malloc(sizeof(double)*3);

	  llh[0] = lat * deg2rad;
	  llh[1] = lon[pixel] * deg2rad;
	  llh[2] = demin[(line-firstline) * ompdemwidth + pixel];
	  latlon_(&elp,xyztemp,llh,&LLH_2_XYZ);
	  xyz[xyzoffset + 0]=xyztemp[0];
	  xyz[xyzoffset + 1]=xyztemp[1];
	  xyz[xyzoffset + 2]=xyztemp[2];

	  // for start, middle, and end get integration midpoints
	  if(pixel==firstpix || pixel == (lastpix+firstpix)/2 || pixel == lastpix-1){

	  tline = omptmid;
	  satx[0] = xyz_mid[0];satx[1] = xyz_mid[1];satx[2] = xyz_mid[2];
	  satv[0] = vel_mid[0];satv[1] = vel_mid[1];satv[2] = vel_mid[2];
	  // get the zero doppler location of the satellite
	  orbitrangetime_(xyztemp,timeorbit,xx,vv,numstatevec,&omptmid,satx,satv,&tline,&rngpix);

	  // tops-specific geometry calculations
	  unitlookvector[0]=(xyztemp[0]-satx[0]); unitlookvector[1]=(xyztemp[1]-satx[1]); unitlookvector[2]=(xyztemp[2]-satx[2]);
	  umag=sqrt(unitlookvector[0]*unitlookvector[0]+unitlookvector[1]*unitlookvector[1]+unitlookvector[2]*unitlookvector[2]);
	  unitlookvector[0]=unitlookvector[0]/umag; unitlookvector[1]=unitlookvector[1]/umag; unitlookvector[2]=unitlookvector[2]/umag;
	  udotv=satv[0]*unitlookvector[0]+satv[1]*unitlookvector[1]+satv[2]*unitlookvector[2];
	  fd=(2.0/ ompwvl) * udotv;
	  veff=sqrt(satv[0]*satv[0]+satv[1]*satv[1]+satv[2]*satv[2]);
	  td=(rngpix* (ompwvl)/2./veff/veff*fd-rngpix*(ompangc0)*pi/180./veff)/(1.+rngpix*(ompangc1)*pi/180./veff);
	  naperture=td*(ompprf) + omprawdatalines/2;

	  if (pixel == firstpix)y1=naperture;
	  if (pixel == (lastpix+firstpix)/2)y2=naperture;
	  if (pixel == lastpix-1)y3=naperture;
	  }  // end if for fit points

	  free(llh);
	  free(xyztemp);
	  free(satx);
	  free(satv);
	  free(unitlookvector);
	} // end pixel loop

	// fit parabola
	c=y2;
	b=0.5*(y3-y1);
	a=0.5*(y1+y3-2.*y2);
	for (i=firstpix; i< lastpix; i++){
	  arg=(float(i-firstpix)/float(lastpix-firstpix)*2.-1.);
	  fit=a*arg*arg+b*arg+c;
	  azoff[(line-firstline) * ompdemwidth + i]=-1;
	  if (fit > ompaperture/2 && fit < omprawdatalines- ompaperture/2){
	  azoff[(line-firstline) * ompdemwidth + i]=fit;
	  }
	}

}  // end line loop

   int fdazoff=open("azoff",O_RDWR | O_CREAT, 0777);
   iaddr_off_t=0;
   iaddr_size_t= arraysize * 8;
   nbytes=lseek(fdazoff, iaddr_off_t, SEEK_END);
   printf("fdazoff seek nbytes %lld\n",nbytes);
   nbytes=write(fdazoff,azoff,iaddr_size_t);
   printf("fdazoff write nbytes %lld\n",nbytes);
   close(fdazoff);

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" time in cpu xyz, azoff loop %9.3f\n",time1-time0);

	// put burst specific info into gpu
//	cudaMemcpy( pixeltime_d, pixeltime, sizeof(double) * *demwidth, cudaMemcpyHostToDevice );
	cudaMemcpy( xyz_d, xyz, sizeof(double) * 3 * arraysize, cudaMemcpyHostToDevice );
	cudaMemcpy( azoff_d, azoff, sizeof(double) * arraysize, cudaMemcpyHostToDevice );

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;
//    printf(" test timer %9.3f\n",time1-time0);

	pixelint<<< numBlocks,blockSize >>>(burstdata_d,satloc_d,xyz_d,azoff_d, *demwidth, *aperture, *iaperture, *rawdatalines, *samplesPerBurst, *rngstart, *rngend, *dmrg, *wvl, outdata_d, nlines);

	cudaDeviceSynchronize();
    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" time in gpu pixel integration  %9.3f\n",time1-time0);

    gettimeofday(&t0, NULL);
    time0=t0.tv_sec+t0.tv_usec/1.e6;

	cudaMemcpy( outdata, outdata_d, sizeof(float complex) * arraysize, cudaMemcpyDeviceToHost );

	// get existing data for that burst
	iaddr_off_t=(long long int) firstline * (long long int) *demwidth * (long long int) 8;
	iaddr_size_t= arraysize * 8;

	nbytes=lseek(*fdout, iaddr_off_t, SEEK_SET);
	nbytes=read(*fdout,indata,iaddr_size_t);

	// update if pixel computed
	for (line=0; line < nlines; line++){
	for (pixel=0; pixel< *demwidth; pixel++){
	    if(abs(creal(outdata[line * *demwidth +pixel])) > 1.e-18)indata[line * *demwidth + pixel]=outdata[line * *demwidth + pixel];
	    }
	    }
	// write line to file
	nbytes=lseek(*fdout, iaddr_off_t, SEEK_SET);
	nbytes=write(*fdout,indata,iaddr_size_t);

    gettimeofday(&t0, NULL);
    time1=t0.tv_sec+t0.tv_usec/1.e6;
    printf(" update and output write time %9.3f\n",time1-time0);

  // free up memory in gpu
  cudaFree(burstdata_d);
  cudaFree(satloc_d);
  cudaFree(azoff_d);
//  cudaFree(pixeltime_d);
//  cudaFree(iaperture_d);
//  cudaFree(rawdatalines_d);
  cudaFree(xyz_d);
//  cudaFree(samplesPerBurst_d);
//  cudaFree(rngstart_d);
//  cudaFree(rngend_d);
//  cudaFree(dmrg_d);
//  cudaFree(wvl_d);

}
