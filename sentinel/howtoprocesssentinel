Simplified process first:

1.  Download zip files with raw data

2.  Create a DEM and rsc file as desired spacing/coverage

    Note:  easiest way to upsample dem is to use the script ~/util/upsample_dem.py

3.  Get the precise orbits for each scene

    The easiest way is to use the script:
    	~/sentinel_l0/sentinel_orbitfiles.py
    This scans the zip files in the directory and downloads the EOF files from the ESA archive.

    Otherwise you can download them by hand.

4.  Run the stack processing script

    CPU version:
    ~/sentinel_l0/sentinel_stack.py <polarization vv or vh, defaults to vv>
    GPU version:
    ~/sentinel_l0/sentinel_gpu.py <polarization vv or vh, defaults to vv>

Individual programs in the script are:

decode the raw data
     sentinel_raw basename (also opens -annot -index files)
     records sensing times in "times" and in header area (80 bytes)

     This also sorts the swaths into raw.x.dat.

     There is a program that only does the sorting:
     sortswath raw.dat swath.txt

range compression
     process_realaperture raw.1.dat
  -->  output bursts, input is decoded raw data

To view raw data after swath separation
     ~/int/powlooks raw.3.dat raw.3.d 30000 10

unfocussed processing
  ~/sentinel_l0/process_bursts 17301

focussed processing (not very high quality image)
   ~/sentinel_l0/process_bursts_sar 17301

To create an orbit file for all bursts (1-11)
    ~/sentinel_l0/precise_orbit_burst.py preciseorbitfile length
    -->  creates orbtiming file

To get the position for each line in a burst
   ~/sentinel_l0/sentineltiming precise_orbtiming burst1 17301
   -->  creates position.out

To create a db file
   ~/sentinel_l0/burst_roidb burstfile dbfile orbtimingfile posfile len

A combined script for the above from create orbit file to db file and latlonlimits 
    ~/sentinel_l0/sentinel_preproc.py S1A_OPER_AUX_POEORB_OPOD_20170901T121527_V20170811T225942_20170813T005942.EOF 20514

Backproject
   ~/sentinel_l0/backproject burst8.db slc
    
