#!/usr/bin/env python

import sys
import os
import math
import string
import sql_mod
import subprocess

ver=sys.version_info
if ver[1] == 4:
    import sqlite as sqlite3

if ver[1] > 4:
    import sqlite3

if len(sys.argv) <  2:
    print 'Usage: sentinel_back_gpu.py preciseorbitfile(*EOF) <length=value from real aperture proc>'
    sys.exit(1)

print len(sys.argv)

preciseorbitfile=sys.argv[1]
if len(sys.argv) > 2:
    length=sys.argv[2]
if len(sys.argv) == 2:
    #print 'reading rangesamples'
    fp=open('rangesamples','r')
    length=fp.readline()
    fp.close()

#  read in latlon bounds
fll=open('latlonlimits','r')
ll=fll.readlines()
fll.close()
latlons1=[]
latlons2=[]
latlons3=[]
latlons4=[]
for line in ll:
    words=line.split()
    latlons1.append(words[1])
    latlons2.append(words[2])
    latlons3.append(words[3])
    latlons4.append(words[4])

# create a position file for each burst
filelistburst = 'filelistburst'
command = 'ls -1 burst* | cat > '+filelistburst
print command
ret = os.system(command)

fburst=open('filelistburst','r')
burst=fburst.readlines()
fburst.close()

# get median result for burst angle steering
burstname=[]
slope=[]
const=[]
i=0
for line in burst:
    words=line.split()
    burstfile=words[-1]    
    command = '/home/zebker/sentinel_l0/burst_angle_steering '+burstfile+' '+length
    print command
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    (steercoeffs, err) = proc.communicate()
    burstname.append(burstfile)
    slope.append(float(steercoeffs.split()[0]))
    const.append(float(steercoeffs.split()[1]))
    #print slope[i],const[i]
    i=i+1

slope=sorted(slope)
const=sorted(const)
slopemed=str(slope[int(i/2)])
constmed=str(const[int(i/2)])
print 'median slope, const: ',slopemed,constmed

i=0
for line in burst:
    if i == 0:
        commandbackproject = '/home/zebker/sentinel_l0/gunter/backprojectgpu slc '+slopemed+' '+constmed+' db.'+burstname[i]
    if i>0:
        commandbackproject = commandbackproject+' db.'+burstname[i]
    
    i=i+1

print commandbackproject
ret = os.system(commandbackproject)
#answer = raw_input("finished a burst, you can exit now with ^z")

sys.exit(0)

